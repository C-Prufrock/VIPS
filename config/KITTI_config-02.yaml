%YAML:2.0   KITTI 0.2

#common parameters
imu_topic: "/KITTIimu"
image_topic: "/image_02"
output_path: "/home/lxy/KITTIoutput/"

#camera calibration 
model_type: PINHOLE
camera_name: 02
image_width: 1242
image_height: 375
##由于KITTI的图像都是rectify后的图像，因此其畸变参数设置为0；
distortion_parameters:
   k1: 0
   k2: 0
   p1: 0
   p2: 0
projection_parameters:
   fx: 7.215e+02
   fy: 7.215e+02
   cx: 6.095e+02
   cy: 2.163e-01
   ##added 因为与00号灰度图在x方向上有平移；
   fn: 4.485e+01

#P_rect 自身
P_rect: !!opencv-matrix
   rows: 3
   cols: 4
   dt: d
   data: [721.53772, 0, 609.55933, 44.85728;
          0, 721.53772, 172.854, 0.2163791;
          0, 0, 1, 0.002745884]
#R_rect
R_rect: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: [0.9998817,0.01511453,-0.002841595,0;
         -0.01511724,0.9998853,-0.000933851,0;
        0.002827154,0.0009766976,0.999955,0;
       0.0000,0.0000,0.0000,1.0000]
##事实上，其他数据集中的投影矩阵参数相当于KITTI数据中的P_rect*R_rect；

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam

##该值需要计算IMU与当前相机坐标系下的转换 首先由imu-vel；再有vel-camera；然后再经过r_rect旋转到第一彩色相机，第一彩色相机经过平移矫正后得到其再彩色相机中的成像点；
##此处的extrinMatrix只记录imu-第一gray相机坐标系的转换；
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [0.0083178589, -0.99986464, 0.014190687,
          0.012777699, -0.014083739, -0.99981928,
          0.99988377, 0.0084976787, 0.012658823]
#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [-0.32921579,0.71158135, -1.0897827]

#feature traker paprameters
max_cnt: 150            # max feature number in feature tracking
min_dist: 30            # min distance between two features 
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 1             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

##改值需要改，但需要寻找数据；
#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.08          # accelerometer measurement noise standard deviation. #0.2   0.04
gyr_n: 0.004         # gyroscope measurement noise standard deviation.     #0.05  0.004
acc_w: 0.00004         # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 2.0e-6       # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.81007     # gravity magnitude

#loop closure parameters
loop_closure: 0                    # start loop closure
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
fast_relocalization: 0             # useful in real-time and large project
pose_graph_save_path: "/home/lxy/slam_course_vins/" # save and load path

#unsynchronization parameters
estimate_td: 0                      # online estimate time offset between camera and imu
td: 0.0                             # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 0                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
